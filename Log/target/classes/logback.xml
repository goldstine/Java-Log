<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--配置集中管理属性,可以直接改属性value值  通过name取value的方式${name}-->
    <!--通过property设置公共变量-->
    <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n"></property>
    <!--
    日志输出格式：
    %-5level
    %d{yyyy-MM-dd HH:mm:ss.SSS}日期
    %c类的完整名称
    %M为method
    %L为行号
    %thread  线程名称
    %m或者%msg为信息
    %n换行
    -->

    <!--定义公共变量，日志文件保存路径-->
    <property name="log_dir" value="D:/goldstine"></property>


    <!--控制台日志输出的appender-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">  <!--对应的输出对象为控制台-->
        <!--控制输出流对象  默认是System.out-->
        <target>System.err</target>      <!--对应的输出为红色字体-->
        <!--日志消息格式设置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>            <!--通过配置的公共变量设置输出格式-->
        </encoder>
    </appender>

    <!--配置日志文件输出的Appender-->
    <appender name="file" class="ch.qos.logback.core.FileAppender">
        <!--日志文件保存路径-->
        <file>${log_dir}/logback.log</file>
        <!--日志消息格式设置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>            <!--通过配置的公共变量设置输出格式-->
        </encoder>
    </appender>


    <!--配置html格式的日志文件输出appender-->
    <appender name="htmlFile" class="ch.qos.logback.core.FileAppender">
        <!--日志文件保存路径-->
        <file>${log_dir}/logback.html</file>
        <!--日志消息格式设置-->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder"><!--设置为自定义格式-->
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>${pattern}</pattern>            <!--通过配置的公共变量设置输出格式-->
            </layout>
        </encoder>
    </appender>


    <!--配置将日志拆分和归档压缩的appender对象-->
    <appender name="rollFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件保存路径-->
        <file>${log_dir}/roll_logback.log</file>
        <!--日志消息格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>

        <!--指定拆分规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--按照时间和压缩格式声明拆分的文件名-->
            <fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd-HH-mm-ss}.log%i.gz</fileNamePattern>
            <!--按照文件大小拆分-->
            <maxFileSize>1MB</maxFileSize>
        </rollingPolicy>

        <!--日志级别过滤器，就是对日志的级别进行过滤-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--日志过滤规则-->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>


    </appender>

    <!--使用异步的日志方式-->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <!--指定某一个具体的appender-->
        <!--异步的输出方式，与主线程分开-->
        <appender-ref ref="rollFile"/>
    </appender>


    <!--root manager配置-->
    <root level="ALL">
        <appender-ref ref="console"></appender-ref>         <!--通过开关开启-->
        <appender-ref ref="async"></appender-ref>           <!--开启日志文件-->
    </root>

    <!--自定义logger对象
        additivity="false" 自定义logger对象是否继承rootlogger
        name表示对应的子包
        对应的子包的所有日志都通过该logger对象进行配置
    -->
    <logger name="logback" level="info" additivity="false">
        <appender-ref ref="console"/>
    </logger>


</configuration>